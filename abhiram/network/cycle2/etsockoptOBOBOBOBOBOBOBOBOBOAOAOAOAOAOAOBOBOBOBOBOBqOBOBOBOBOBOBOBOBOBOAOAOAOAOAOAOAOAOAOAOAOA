GETSOCKOPT(2)                                                  Linux Programmer's Manual                                                  GETSOCKOPT(2)

NNAAMMEE
       getsockopt, setsockopt - get and set options on sockets

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>          /* See NOTES */
       ##iinncclluuddee <<ssyyss//ssoocckkeett..hh>>

       iinntt ggeettssoocckkoopptt((iinntt _s_o_c_k_f_d,, iinntt _l_e_v_e_l,, iinntt _o_p_t_n_a_m_e,,
                      vvooiidd **_o_p_t_v_a_l,, ssoocckklleenn__tt **_o_p_t_l_e_n));;
       iinntt sseettssoocckkoopptt((iinntt _s_o_c_k_f_d,, iinntt _l_e_v_e_l,, iinntt _o_p_t_n_a_m_e,,
                      ccoonnsstt vvooiidd **_o_p_t_v_a_l,, ssoocckklleenn__tt _o_p_t_l_e_n));;

DDEESSCCRRIIPPTTIIOONN
       ggeettssoocckkoopptt() and sseettssoocckkoopptt() manipulate options for the socket referred to by the file descriptor _s_o_c_k_f_d.  Options may exist at multiple proto‐
       col levels; they are always present at the uppermost socket level.

       When manipulating socket options, the level at which the option resides and the name of the option must be specified.  To manipulate options  at
       the sockets API level, _l_e_v_e_l is specified as SSOOLL__SSOOCCKKEETT.  To manipulate options at any other level the protocol number of the appropriate proto‐
       col controlling the option is supplied.  For example, to indicate that an option is to be interpreted by the TTCCPP protocol, _l_e_v_e_l should  be  set
       to the protocol number of TTCCPP; see ggeettpprroottooeenntt(3).

       The  arguments  _o_p_t_v_a_l and _o_p_t_l_e_n are used to access option values for sseettssoocckkoopptt().  For ggeettssoocckkoopptt() they identify a buffer in which the value
       for the requested option(s) are to be returned.  For ggeettssoocckkoopptt(), _o_p_t_l_e_n is a value-result argument, initially containing the size of the  buf‐
       fer  pointed  to  by  _o_p_t_v_a_l, and modified on return to indicate the actual size of the value returned.  If no option value is to be supplied or
       returned, _o_p_t_v_a_l may be NULL.

       _O_p_t_n_a_m_e and any specified options  are  passed  uninterpreted  to  the  appropriate  protocol  module  for  interpretation.   The  include  file
       _<_s_y_s_/_s_o_c_k_e_t_._h_>  contains  definitions for socket level options, described below.  Options at other protocol levels vary in format and name; con‐
       sult the appropriate entries in section 4 of the manual.

       Most socket-level options utilize an _i_n_t argument for _o_p_t_v_a_l.  For sseettssoocckkoopptt(), the argument should be nonzero to enable a boolean  option,  or
       zero if the option is to be disabled.

       For a description of the available socket options see ssoocckkeett(7) and the appropriate protocol man pages.

RREETTUURRNN VVAALLUUEE
       On success, zero is returned for the standard options.  On error, -1 is returned, and _e_r_r_n_o is set appropriately.

       Netfilter  allows  the programmer to define custom socket options with associated handlers; for such options, the return value on success is the
       value returned by the handler.

EERRRROORRSS
       EEBBAADDFF     The argument _s_o_c_k_f_d is not a valid file descriptor.

       EEFFAAUULLTT    The address pointed to by _o_p_t_v_a_l is not in a valid part of the process address space.   For  ggeettssoocckkoopptt(),  this  error  may  also  be
                 returned if _o_p_t_l_e_n is not in a valid part of the process address space.

       EEIINNVVAALL    _o_p_t_l_e_n  invalid in sseettssoocckkoopptt().  In some cases this error can also occur for an invalid value in _o_p_t_v_a_l (e.g., for the IIPP__AADDDD__MMEEMMBBEERR‐‐
                 SSHHIIPP option described in iipp(7)).

       EENNOOPPRROOTTOOOOPPTT
                 The option is unknown at the level indicated.

       EENNOOTTSSOOCCKK  The file descriptor _s_o_c_k_f_d does not refer to a socket.

CCOONNFFOORRMMIINNGG TTOO
       POSIX.1-2001, POSIX.1-2008, SVr4, 4.4BSD (these system calls first appeared in 4.2BSD).

NNOOTTEESS
       POSIX.1 does not require the inclusion of _<_s_y_s_/_t_y_p_e_s_._h_>, and this header file is not required on Linux.  However, some historical  (BSD)  imple‐
       mentations required this header file, and portable applications are probably wise to include it.

       For background on the _s_o_c_k_l_e_n___t type, see aacccceepptt(2).

BBUUGGSS
       Several of the socket options should be handled at lower levels of the system.

SSEEEE AALLSSOO
       iiooccttll(2), ssoocckkeett(2), ggeettpprroottooeenntt(3), pprroottooccoollss(5), iipp(7), ppaacckkeett(7), ssoocckkeett(7), ttccpp(7), uuddpp(7), uunniixx(7)

CCOOLLOOPPHHOONN
       This  page is part of release 5.00 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the project, information about reporting bugs, and the lat‐
       est version of this page, can be found at https://www.kernel.org/doc/man-pages/.

Linux                                                                  2017-09-15                                                         GETSOCKOPT(2)
